#!/bin/sh

readonly THIS="$(
	exec 2>/dev/null
	realpath -- "$0" || readlink -f -- "$0" || printf -- %s "$0"
)"

#-------------------------------------------------------------------------------

main () {
	readonly LOCAL_LOGS_DIR="$(dirname "$THIS")/retroarch/playlists/logs"
	readonly REMOTE_LOGS_DIR="$HOME/.retroarch/playlists/logs"

	if ! test -d "$LOCAL_LOGS_DIR"; then
		log error Directory "$LOCAL_LOGS_DIR" not found
		exit 2
	fi
	if ! test -d "$REMOTE_LOGS_DIR"; then
		log error Directory "$REMOTE_LOGS_DIR" not found
		exit 2
	fi

	cd "$LOCAL_LOGS_DIR" || {
		log error Failed to change to directory "$LOCAL_LOGS_DIR"
		exit 2
	}

	for log in *.lrtl; do
		if ! test -f "$REMOTE_LOGS_DIR/$log"; then
			log info Skipping "$(basename "$log" .lrtl)", \
				"$REMOTE_LOGS_DIR/$log" does not exist...
			continue
		fi
		if ! test -f "$log.last-sync.runtime"; then
			log info Syncing "$(basename "$log" .lrtl)" for the first time...
			printf '%s\n' 0 >"$log.last-sync.runtime"
		fi

		local_runtime="$(
			json_get_key_value "$log" runtime
		)"
		local_runtime_seconds="$(time_to_seconds "$local_runtime")"

		lastsync_runtime="$(cat "$log.last-sync.runtime")"
		lastsync_runtime_seconds="$(time_to_seconds "$lastsync_runtime")"

		remote_runtime="$(
			json_get_key_value "$REMOTE_LOGS_DIR/$log" runtime
		)"
		remote_runtime_seconds="$(time_to_seconds "$remote_runtime")"

		unset -v new_runtime new_runtime_seconds_diff
		if test "$local_runtime_seconds" -gt "$lastsync_runtime_seconds"; then
			new_runtime_seconds_diff="$((
				local_runtime_seconds - lastsync_runtime_seconds
			))"
			new_runtime="$(seconds_to_time "$((
				remote_runtime_seconds + new_runtime_seconds_diff
			))")"
		fi

		if test "$new_runtime" && test "$new_runtime_seconds_diff"; then
			log info Adding "$new_runtime_seconds_diff" seconds to runtime for \
				"$(basename "$log" .lrtl)"...
			json_update_key_value "$log" \
				runtime "$new_runtime"
			json_update_key_value "$REMOTE_LOGS_DIR/$log" \
				runtime "$new_runtime"
			log info Runtime for "$(basename "$log" .lrtl)" is now \
				"$new_runtime"
		else
			log info Skipping "$(basename "$log" .lrtl)", \
				runtime has not changed...
		fi

		printf '%s\n' "${new_runtime:-$local_runtime}" \
			>"$log.last-sync.runtime"
	done
}

#-------------------------------------------------------------------------------

json_get_key_value () {(
	file="${1:?}"; shift
	key="${*:?}"
	sed -n <"$file" \
		's/^[[:space:]]*"'"$key"'":[[:space:]]*"\([^"]\{1,\}\)".*/\1/p'
)}

json_update_key_value () {(
	file="${1:?}"; shift
	key="${1:?}"; shift
	value="${*:?}"
	sed <"$file" \
		's/\(^[[:space:]]*"'"$key"'":[[:space:]]*"\)[^"]\{1,\}\(".*\)/\1'"$value"'\2/' \
		>"$file.new" \
	&& mv -f "$file.new" "$file"
)}

log () {(
	level="${1:?}"; shift
	message="${*:?}"
	printf '%s: %s: %s\n' \
		"$(basename "$THIS" .sh)" \
		"$level" \
		"$message"
)}

seconds_to_time () {(
	hours="$(( "${*:?}" / 3600 ))"
	minutes="$(( ("${*:?}" % 3600) / 60 ))"
	seconds="$(( ("${*:?}" % 3600) % 60 ))"
	printf '%d:%02d:%02d\n' "$hours" "$minutes" "$seconds"
)}

time_to_seconds () {(
	# input: HH:MM:SS
	hours="$(printf '%s\n' "${*:?}" | cut -d : -f 1)"
	minutes="$(printf '%s\n' "${*:?}" | cut -d : -f 2)"
	seconds="$(printf '%s\n' "${*:?}" | cut -d : -f 3)"
	printf '%s\n' "$(( (hours * 3600) + (minutes * 60) + seconds ))"
)}

#-------------------------------------------------------------------------------

main "$@"
